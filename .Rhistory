}
} else {
o <- af_raw
}
# create SingleCellExperiment object
sce <- SingleCellExperiment(list(counts = t(o)),
colData = afc,
rowData = afg
)
sce
}
set.seed(1234)
dir.create("figures",recursive = TRUE, showWarnings = FALSE)
sce <- load_fry('mouse_labyrinth_nuclei_p14.5_quant', which_counts = c('U','S', 'A'))
gid_to_gname <- read.table('geneid_to_name.txt')
rownames(sce) <- gid_to_gname$V2[match(rownames(sce), gid_to_gname$V1)]
source("cellRangerLikeEmptyDrops.R")
e.out = cellRangerLikeEmptyDrops(m=counts(sce))
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages({
# library(devtools)
library(ggplot2)
library(SingleCellExperiment)
library(Seurat)
library(DropletUtils)
library(pheatmap)
library(reticulate)
})
dir.create("figures",recursive = TRUE, showWarnings = FALSE)
#' Read alevin-fry quantifications into a SingleCellExperiment object
load_fry <- function(frydir, which_counts = c('S', 'A'), verbose = FALSE) {
suppressPackageStartupMessages({
library(rjson)
library(Matrix)
library(SingleCellExperiment)
})
# read in metadata
meta_info <- fromJSON(file = file.path(frydir, "meta_info.json"))
ng <- meta_info$num_genes
usa_mode <- meta_info$usa_mode
if (usa_mode) {
if (length(which_counts) == 0) {
stop("Please at least provide one status in 'U' 'S' 'A' ")
}
if (verbose) {
message("processing input in USA mode, will return ", paste(which_counts, collapse = '+'))
}
} else if (verbose) {
message("processing input in standard mode, will return spliced count")
}
# read in count matrix
af_raw <- readMM(file = file.path(frydir, "alevin", "quants_mat.mtx"))
# if usa mode, each gene gets 3 rows, so the actual number of genes is ng/3
if (usa_mode) {
if (ng %% 3 != 0) {
stop("The number of quantified targets is not a multiple of 3")
}
ng <- as.integer(ng/3)
}
# read in gene name file and cell barcode file
afg <- read.csv(file.path(frydir, "alevin", "quants_mat_cols.txt"),
strip.white = TRUE, header = FALSE, nrows = ng,
col.names = c("gene_ids"), row.names = 1)
afc <- read.csv(file.path(frydir, "alevin", "quants_mat_rows.txt"),
strip.white = TRUE, header = FALSE,
col.names = c("barcodes"), row.names = 1)
# if in usa_mode, sum up counts in different status according to which_counts
if (usa_mode) {
rd <- list("S" = seq(1, ng), "U" =  seq(ng + 1, 2 * ng),
"A" =  seq(2 * ng + 1, 3 * ng))
o <- af_raw[, rd[[which_counts[1]]], drop = FALSE]
for (wc in which_counts[-1]) {
o <- o + af_raw[, rd[[wc]], drop = FALSE]
}
} else {
o <- af_raw
}
# create SingleCellExperiment object
sce <- SingleCellExperiment(list(counts = t(o)),
colData = afc,
rowData = afg
)
sce
}
set.seed(1234)
dir.create("figures",recursive = TRUE, showWarnings = FALSE)
sce <- load_fry('mouse_labyrinth_nuclei_p14.5_quant', which_counts = c('U','S', 'A'))
gid_to_gname <- read.table('geneid_to_name.txt')
rownames(sce) <- gid_to_gname$V2[match(rownames(sce), gid_to_gname$V1)]
source("cellRangerLikeEmptyDrops.R")
m=counts(sce)
umi.min=500
umi.min.frac.median=0.01
can.max.n=20000
ind.max=90000
by.rank=45000
max.percentile=0.99
expected=3000
max.min.ratio=10
fdr.thresh=0.01
###################################################################################################################
# get the sorted nUMI vector of cells
totals <- colSums(m)
###################################################################################################################
# get the sorted nUMI vector of cells
totals <- sort(colSums(m),decreasing = TRUE)
# Simple Filtering
max.ambient.ind <- round(expected * (1 - min.ambient.percentile))
min.ambient.percentile=0.99
# Simple Filtering
max.ambient.ind <- round(expected * (1 - min.ambient.percentile))
max.ambient.ind
max.ambient.total <- totals[min(ncol(m), max.ambient.ind)]
max.ambient.total
min.ambient.total <- round(max.ambient.total/max.min.mabient.ratio)
min.ambient.total
max.min.mabient.ratio=10
min.ambient.total <- round(max.ambient.total/max.min.mabient.ratio)
min.ambient.total
ncells.simple <- sum(totals>=min.ambient.total)
ncells.simple
# Simple Filtering
maxind <- round(expected * (1 - max.percentile))
maxind
?emptyDrops
###################################################################################################################
# get the sorted nUMI vector of cells
totals <- sort(colSums(m),decreasing = TRUE)
# Simple Filtering
maxind <- round(expected * (1 - max.percentile))
nUMImax <- totals[min(ncol(m), maxind)]
nUMImin <- round(nUMImax/max.min.ratio)
ncells.simple <- sum(totals>=nUMImin)
ncells.simple
# set lower bound
minUMI <- max(umi.min, round(umi.min.frac.median * totals[ncells.simple/2]))
minUMI
## we at most assign can.max.n barcodes in the ambient pool as real cells
minUMI <- max(minUMI, totals[min(ncells.simple+can.max.n,length(totals))])
minUMI
# emptyDrops
## ignore: the lower bound of UMI count, barcodes with UMI count less than ignore
## will not be used to compute the ambient profile.
ignore_index <- min(ncol(m), ind.max)
ind.max
nrow(m)
ncol(m)
m[, order(colSums(m), decreasing = TRUE)[1:ind.max]]
source("cellRangerLikeEmptyDrops.R")
e.out = cellRangerLikeEmptyDrops(m=counts(sce))
source("cellRangerLikeEmptyDrops.R")
e.out = cellRangerLikeEmptyDrops(m=counts(sce))
sum(e.out$is.cell)
set.seed(2718)
e.out = cellRangerLikeEmptyDrops(m=counts(sce))
###################################################################################################################
# get the sorted nUMI vector of barcodes
totals <- sort(colSums(m),decreasing = TRUE)
totals
# Simple Filtering
max.ind <- round(expected * (1 - max.percentile))
max.ind
total.max <- totals[min(ncol(m), max.ind)]
total.min <- round(total.max/max.min.ratio)
ncells.simple <- sum(totals>=total.min)
## ignore: the lower bound of UMI count, barcodes with UMI count less than ignore
## will not be used to compute the ambient profile.
ignore <- max(umi.min, round(umi.min.frac.median * totals[ncells.simple/2]))
## we at most assign can.max.n barcodes in the ambient pool as real barcodes
ignore <- max(ignore, totals[min(ncells.simple+can.max.n, length(totals))])
total.max
total.min
ncells.simple
ignore
ignore
# emptyDrops
## retain: barcodes with UMI count higher than retain will be regarded as real barcodes
retain <- totals[ncells.simple]
retain
ncells.simple
## the cells with total UMI count between ignore and lower will be considered as ambient
e.out <- emptyDrops(m[, order(colSums(m), decreasing = TRUE)[1:min(ncol(m), ind.max)]], by.rank=by.rank, ignore=ignore, retain=retain, alpha=Inf, ...)
e.out <- emptyDrops(m[, order(colSums(m), decreasing = TRUE)[1:min(ncol(m), ind.max)]], by.rank=by.rank, ignore=ignore, retain=retain, alpha=Inf)
e.out
e.out$is.cell <- e.out$FDR < fdr.thresh
e.out$is.cell[is.na(e.out$is.cell)] <- FALSE
colnames(m)
c(1,2) %in% c(1,5)
colnames(m) %in% colnames(e.out)[is.cell]
is.cell <- e.out$FDR < fdr.thresh
is.cell[is.na(is.cell)] <- FALSE
colnames(m) %in% colnames(e.out)[is.cell]
sum( colnames(m) %in% colnames(e.out)[is.cell])
colnames(m) %in% rownames(e.out)[is.cell]
sum(colnames(m) %in% rownames(e.out)[is.cell])
sum(e.out$is.cell)
source("cellRangerLikeEmptyDrops.R")
set.seed(2718)
e.out = cellRangerLikeEmptyDrops(m=counts(sce))
is.cell = cellRangerLikeEmptyDrops(m=counts(sce))
sum(is.cell)
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages({
# library(devtools)
library(ggplot2)
library(SingleCellExperiment)
library(Seurat)
library(DropletUtils)
library(pheatmap)
library(reticulate)
})
dir.create("figures",recursive = TRUE, showWarnings = FALSE)
#' Read alevin-fry quantifications into a SingleCellExperiment object
load_fry <- function(frydir, which_counts = c('S', 'A'), verbose = FALSE) {
suppressPackageStartupMessages({
library(rjson)
library(Matrix)
library(SingleCellExperiment)
})
# read in metadata
meta_info <- fromJSON(file = file.path(frydir, "meta_info.json"))
ng <- meta_info$num_genes
usa_mode <- meta_info$usa_mode
if (usa_mode) {
if (length(which_counts) == 0) {
stop("Please at least provide one status in 'U' 'S' 'A' ")
}
if (verbose) {
message("processing input in USA mode, will return ", paste(which_counts, collapse = '+'))
}
} else if (verbose) {
message("processing input in standard mode, will return spliced count")
}
# read in count matrix
af_raw <- readMM(file = file.path(frydir, "alevin", "quants_mat.mtx"))
# if usa mode, each gene gets 3 rows, so the actual number of genes is ng/3
if (usa_mode) {
if (ng %% 3 != 0) {
stop("The number of quantified targets is not a multiple of 3")
}
ng <- as.integer(ng/3)
}
# read in gene name file and cell barcode file
afg <- read.csv(file.path(frydir, "alevin", "quants_mat_cols.txt"),
strip.white = TRUE, header = FALSE, nrows = ng,
col.names = c("gene_ids"), row.names = 1)
afc <- read.csv(file.path(frydir, "alevin", "quants_mat_rows.txt"),
strip.white = TRUE, header = FALSE,
col.names = c("barcodes"), row.names = 1)
# if in usa_mode, sum up counts in different status according to which_counts
if (usa_mode) {
rd <- list("S" = seq(1, ng), "U" =  seq(ng + 1, 2 * ng),
"A" =  seq(2 * ng + 1, 3 * ng))
o <- af_raw[, rd[[which_counts[1]]], drop = FALSE]
for (wc in which_counts[-1]) {
o <- o + af_raw[, rd[[wc]], drop = FALSE]
}
} else {
o <- af_raw
}
# create SingleCellExperiment object
sce <- SingleCellExperiment(list(counts = t(o)),
colData = afc,
rowData = afg
)
sce
}
set.seed(1234)
dir.create("figures",recursive = TRUE, showWarnings = FALSE)
sce <- load_fry('mouse_labyrinth_nuclei_p14.5_quant', which_counts = c('U','S', 'A'))
gid_to_gname <- read.table('geneid_to_name.txt')
rownames(sce) <- gid_to_gname$V2[match(rownames(sce), gid_to_gname$V1)]
source("cellRangerLikeEmptyDrops.R")
set.seed(2718)
is.cell = cellRangerLikeEmptyDrops(m=counts(sce))
sum(is.cell)
sce = sce[, is.cell]
object <- CreateSeuratObject(counts = counts(sce))
object[["percent.mt"]] <- PercentageFeatureSet(object, pattern = "^mt-") #Calculate percent mitochondrial genes
object
pdf(file = "figures/fry_empryDropCR_filtered_QC.pdf",   # The directory you want to save the file in
width = 12, # The width of the plot in inches
height = 8) # The height of the plot in inches
VlnPlot(object, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3,pt.size = 0)
# Step 3: Run dev.off() to create the file!
dev.off()
object_filt <- subset(object, subset = nFeature_RNA > 500
& nFeature_RNA < 4000
& percent.mt < 0.25
)
VlnPlot(object_filt, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3,pt.size = 0)
object_filt
pdf(file = "figures/fry_empryDropCR_filtered_nuclei_QC.pdf",   # The directory you want to save the file in
width = 12, # The width of the plot in inches
height = 8) # The height of the plot in inches
VlnPlot(object_filt, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3,pt.size = 0)
# Step 3: Run dev.off() to create the file!
dev.off()
object_filt <- NormalizeData(object_filt, normalization.method = "LogNormalize", scale.factor = 10000)
object_filt <- FindVariableFeatures(object_filt, selection.method = "vst", nfeatures = 2000)
all.genes <- VariableFeatures(object_filt)
object_filt <- ScaleData(object_filt, features = rownames(object_filt))
object_filt <- RunPCA(object_filt, features = VariableFeatures(object = object_filt))
object_filt <- JackStraw(object_filt,dims = 50)
object_filt <- ScoreJackStraw(object_filt,dims = 1:50)
JackStrawPlot(object = object_filt,dims = 1:50)
pvals_cs = cumsum(object_filt@reductions$pca@jackstraw$overall.p.values[,2])
sig_pcs = py$knee
sig_pcs
object_filt <- RunUMAP(object_filt, dims = 1:sig_pcs)
object_filt <- RunTSNE(object_filt, dims = 1:sig_pcs,check_duplicates = FALSE)
object_filt <- FindNeighbors(object_filt,  reduction = "pca", dims = 1:sig_pcs)
object_filt <- FindClusters(object_filt, resolution = 0.6)
DimPlot(object_filt, reduction = "tsne", label=TRUE,repel=TRUE) + theme(axis.title.y = element_blank(), axis.title.x = element_blank())
# Downloaded from https://ndownloader.figshare.com/files/25422998
load("mouse_labyrinth_nuclei_p14.5_quant/snRNA-seq_object.Rdata")
mouse.combined <- FindVariableFeatures(mouse.combined, selection.method = "vst", nfeatures = 2000)
# mouse.combined <- RunPCA(mouse.combined, features = VariableFeatures(object = mouse.combined))
# Common cell type names
Cluster.4 <- "Decidual Stroma"
Cluster.13 <- "Blood Cells"
Cluster.17 <- "Blood Cells"
Cluster.21 <- "Blood Cells"
Cluster.22 <- "Blood Cells"
Cluster.23 <- "Blood Cells"
Cluster.3 <- "Endothelial"
Cluster.25 <- "Endothelial"
Cluster.26 <- "Endothelial"
Cluster.20 <- "Endothelial"
Cluster.6 <- "Fetal Mesenchyme"
Cluster.10 <- "Fetal Mesenchyme"
Cluster.24 <- "Fetal Mesenchyme"
Cluster.15 <- "Fetal Mesenchyme"
Cluster.19 <- "Fetal Mesenchyme"
Cluster.8 <- "Trophoblast"
Cluster.16 <- "Trophoblast"
Cluster.18 <- "Trophoblast"
Cluster.0 <- "Trophoblast"
Cluster.14 <- "Trophoblast"
Cluster.9 <- "Trophoblast"
Cluster.12 <- "Trophoblast"
Cluster.7 <- "Trophoblast"
Cluster.1 <- "Trophoblast"
Cluster.2 <- "Trophoblast"
Cluster.11 <- "Trophoblast"
Cluster.5 <- "Trophoblast"
new.cluster.ids <- c(Cluster.0, Cluster.1, Cluster.2, Cluster.3, Cluster.4, Cluster.5, Cluster.6, Cluster.7, Cluster.8, Cluster.9, Cluster.10,
Cluster.11, Cluster.12, Cluster.13, Cluster.14, Cluster.15, Cluster.16, Cluster.17, Cluster.18, Cluster.19, Cluster.20,
Cluster.21, Cluster.22, Cluster.23, Cluster.24, Cluster.25, Cluster.26)
names(new.cluster.ids) <- levels(mouse.combined)
mouse.combined <- RenameIdents(mouse.combined, new.cluster.ids)
mouse.combined$celltype <- Idents(mouse.combined)
mouse.combined$celltype <- factor(mouse.combined$celltype, levels = levels(mouse.combined))
Idents(mouse.combined) = mouse.combined$celltype
mouse.combined <- RunTSNE(mouse.combined, dims = 1:20,check_duplicates = FALSE)
DimPlot(mouse.combined, reduction = "tsne", label=TRUE,repel=TRUE) + theme(axis.title.y = element_blank(), axis.title.x = element_blank())+ scale_color_manual(values=c("#00AFBB", "#E7B800",  "#D55E00","#FC4E07", "#CC79A7"))
mouse.E14.5 <- subset(mouse.combined, subset = GA == "E14.5")
mouse.E14.5 <- RunTSNE(mouse.E14.5, dims = 1:20,check_duplicates = FALSE)
# # Step 1: Call the pdf command to start the plot
pdf(file = "figures/ref_tsne.pdf",   # The directory you want to save the file in
width = 12, # The width of the plot in inches
height = 8) # The height of the plot in inches
DimPlot(mouse.combined, reduction = "tsne", label=TRUE,repel=TRUE) + theme(axis.title.y = element_blank(), axis.title.x = element_blank())+ scale_color_manual(values=c("#00AFBB", "#E7B800",  "#D55E00","#FC4E07", "#CC79A7"))
# Step 3: Run dev.off() to create the file!
dev.off()
anchorset <- FindTransferAnchors(reference = mouse.combined, query = object_filt, dims = 1:sig_pcs)
predictions <- TransferData(anchorset = anchorset, refdata = Idents(mouse.combined), dims = 1:sig_pcs)
object_filt <- AddMetaData(object_filt, metadata = predictions)
prediction.scores <- object_filt@meta.data[, grepl("^prediction.score|RNA_snn_res.0.6", names(object_filt@meta.data))]
prediction.scores <- prediction.scores[,-which(names(prediction.scores) == "prediction.score.max")]
colnames(prediction.scores) <- gsub("prediction.score.", "", colnames(prediction.scores))
prediction.scores <- reshape2::melt(prediction.scores, id.vars = "RNA_snn_res.0.6", variable.name = "source", value.name = "score")
prediction.matrix <- tapply(prediction.scores$score, list(prediction.scores$RNA_snn_res.0.6, prediction.scores$source), median)
liver.hm <- pheatmap(prediction.matrix, cluster_rows = FALSE, cluster_cols = FALSE, color = colorRampPalette(c("white","red"))(200), display_numbers = FALSE, silent = TRUE)
liver.hm
n = colnames(prediction.matrix)
n = sub("."," ", n, fixed = TRUE)
new.cluster.ids = c()
for (ridx in 1:nrow(prediction.matrix)) {
new.cluster.ids = c(new.cluster.ids, n[which.max(prediction.matrix[ridx,])])
}
names(new.cluster.ids) <- levels(object_filt)
object_filt <- RenameIdents(object_filt, new.cluster.ids)
object_filt$celltype <- Idents(object_filt)
object_filt$celltype <- factor(object_filt$celltype, levels = levels(mouse.combined))
Idents(object_filt) <- object_filt$celltype
# levels(object_filt) = c("Blood Cells", "Decidual Stroma", "Endothelial", "Fetal Mesenchyme", "Trophoblast")
DimPlot(object_filt, reduction = "tsne", label=TRUE,repel=TRUE) + theme(axis.title.y = element_blank(), axis.title.x = element_blank()) + scale_color_manual(values=c("#00AFBB", "#E7B800",  "#D55E00","#FC4E07", "#CC79A7"))
# Step 1: Call the pdf command to start the plot
pdf(file = "figures/fry_empryDropCR_filtered_tsne.pdf",   # The directory you want to save the file in
width = 12, # The width of the plot in inches
height = 8) # The height of the plot in inches
# DimPlot(object_filt, reduction = "tsne", label=TRUE,repel=TRUE) + theme(axis.title.y = element_blank(), axis.title.x = element_blank())
DimPlot(object_filt, reduction = "tsne", label=TRUE,repel=TRUE) + theme(axis.title.y = element_blank(), axis.title.x = element_blank()) + scale_color_manual(values=c("#00AFBB", "#E7B800",  "#D55E00","#FC4E07", "#CC79A7"))
# Step 3: Run dev.off() to create the file!
dev.off()
troph_object = subset(object_filt, idents = "Trophoblast")
DefaultAssay(troph_object) <- 'RNA'
troph_object <- FindVariableFeatures(troph_object, selection.method = "vst", nfeatures = 2000)
all.genes <- VariableFeatures(troph_object)
troph_object <- ScaleData(troph_object, features = rownames(troph_object))
troph_object <- RunPCA(troph_object, features = VariableFeatures(object = troph_object))
troph_object <- JackStraw(troph_object,dims = 50)
troph_object <- ScoreJackStraw(troph_object,dims = 1:50)
troph_object <- JackStraw(troph_object, dims = 50)
m > 0
m > 0[1]
(m > 0)[1,1]
which(rowSums(m > 0))
m > 0
rowSums(m > 0)
###################################################################################################################
# find genes that were detected in all cells
# SoloFeature_emptyDrops_CR.cpp line 23-31
feat.det = which(rowSums(m > 0) == nrow(m))
nrow(m)
4:6
source("cellRangerLikeEmptyDrops_20210704.R")
source("cellRangerLikeEmptyDrops_20210704.R")
set.seed(2718)
is.cell = cellRangerLikeEmptyDrops(m=counts(sce))
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages({
# library(devtools)
library(ggplot2)
library(SingleCellExperiment)
library(Seurat)
library(DropletUtils)
library(pheatmap)
library(reticulate)
})
dir.create("figures",recursive = TRUE, showWarnings = FALSE)
#' Read alevin-fry quantifications into a SingleCellExperiment object
load_fry <- function(frydir, which_counts = c('S', 'A'), verbose = FALSE) {
suppressPackageStartupMessages({
library(rjson)
library(Matrix)
library(SingleCellExperiment)
})
# read in metadata
meta_info <- fromJSON(file = file.path(frydir, "meta_info.json"))
ng <- meta_info$num_genes
usa_mode <- meta_info$usa_mode
if (usa_mode) {
if (length(which_counts) == 0) {
stop("Please at least provide one status in 'U' 'S' 'A' ")
}
if (verbose) {
message("processing input in USA mode, will return ", paste(which_counts, collapse = '+'))
}
} else if (verbose) {
message("processing input in standard mode, will return spliced count")
}
# read in count matrix
af_raw <- readMM(file = file.path(frydir, "alevin", "quants_mat.mtx"))
# if usa mode, each gene gets 3 rows, so the actual number of genes is ng/3
if (usa_mode) {
if (ng %% 3 != 0) {
stop("The number of quantified targets is not a multiple of 3")
}
ng <- as.integer(ng/3)
}
# read in gene name file and cell barcode file
afg <- read.csv(file.path(frydir, "alevin", "quants_mat_cols.txt"),
strip.white = TRUE, header = FALSE, nrows = ng,
col.names = c("gene_ids"), row.names = 1)
afc <- read.csv(file.path(frydir, "alevin", "quants_mat_rows.txt"),
strip.white = TRUE, header = FALSE,
col.names = c("barcodes"), row.names = 1)
# if in usa_mode, sum up counts in different status according to which_counts
if (usa_mode) {
rd <- list("S" = seq(1, ng), "U" =  seq(ng + 1, 2 * ng),
"A" =  seq(2 * ng + 1, 3 * ng))
o <- af_raw[, rd[[which_counts[1]]], drop = FALSE]
for (wc in which_counts[-1]) {
o <- o + af_raw[, rd[[wc]], drop = FALSE]
}
} else {
o <- af_raw
}
# create SingleCellExperiment object
sce <- SingleCellExperiment(list(counts = t(o)),
colData = afc,
rowData = afg
)
sce
}
set.seed(1234)
dir.create("figures",recursive = TRUE, showWarnings = FALSE)
sce <- load_fry('mouse_labyrinth_nuclei_p14.5_quant', which_counts = c('U','S', 'A'))
gid_to_gname <- read.table('geneid_to_name.txt')
rownames(sce) <- gid_to_gname$V2[match(rownames(sce), gid_to_gname$V1)]
source("cellRangerLikeEmptyDrops_20210704.R")
set.seed(2718)
is.cell = cellRangerLikeEmptyDrops(m=counts(sce))
?.bpNotSharedOrUp
library(DropletUtils)
is.cell = cellRangerLikeEmptyDrops(m=counts(sce))
source("cellRangerLikeEmptyDrops_20210704.R")
set.seed(2718)
is.cell = cellRangerLikeEmptyDrops(m=counts(sce))
?BiocManager::install
install.packages("C:/Users/Zaza/Desktop/COMBINE-lab/CODE/github/DropletUtils_1.13.1.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/Zaza/Desktop/COMBINE-lab/CODE/github/DropletUtils_1.13.1.tar.gz", repos = NULL, type = "source")
setwd("C:/Users/Zaza/Desktop/COMBINE-lab/CODE/github/DropletUtils")
library(devtools)
build()
library(DropletUtils, lib.loc = "C:/Users/Zaza/Documents/R/win-library/4.0")
remove.packages("DropletUtils", lib="C:/Users/Zaza/Documents/R/win-library/4.0")
install.packages(c("BiocManager", "broom", "cli", "colorspace", "corpustools", "cpp11", "curl", "dplyr", "gargle", "gert", "ggplot2", "gtools", "mime", "mvtnorm", "parallelly", "plotly", "proxy", "quantreg", "raster", "rbibutils", "rmarkdown", "RMySQL", "Seurat", "SeuratObject", "spatstat", "spatstat.core", "spatstat.geom", "spatstat.linnet", "spatstat.utils", "stringi", "testthat", "xfun"))
build()
BiocManager::install("beachmat")
